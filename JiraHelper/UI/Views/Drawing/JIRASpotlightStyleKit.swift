//
//  JIRASpotlightStyleKit.swift
//  JIRASpotlight
//
//  Created by Kacper Harasim on 28.05.2017.
//  Copyright Â© 2017 . All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import Cocoa

public class JIRASpotlightStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let color: NSColor = NSColor(red: 0.169, green: 0.38, blue: 0.635, alpha: 1)
    }

    //// Colors

    public dynamic class var color: NSColor { return Cache.color }

    //// Drawing Methods

    public dynamic class func drawCheckMark(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 111, height: 92), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 111, height: 92), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 111, y: resizedFrame.height / 92)


        //// Oval Drawing
        let ovalPath = NSBezierPath(ovalIn: NSRect(x: 17, y: 7, width: 77, height: 77))
        JIRASpotlightStyleKit.color.setStroke()
        ovalPath.lineWidth = 4.5
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 31, y: 44))
        bezierPath.curve(to: NSPoint(x: 48, y: 27), controlPoint1: NSPoint(x: 45, y: 29), controlPoint2: NSPoint(x: 48, y: 27))
        bezierPath.line(to: NSPoint(x: 63.47, y: 45.96))
        bezierPath.line(to: NSPoint(x: 79, y: 65))
        JIRASpotlightStyleKit.color.setStroke()
        bezierPath.lineWidth = 4.5
        bezierPath.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }




    @objc(JIRASpotlightStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: NSRect, target: NSRect) -> NSRect {
            if rect == target || target == NSRect.zero {
                return rect
            }

            var scales = NSSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
